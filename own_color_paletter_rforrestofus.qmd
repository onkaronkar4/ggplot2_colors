---
title: "How to make your own color palettes in ggplot"
format: html
editor: visual
---

# [**How to make your own color palettes in ggplot**](https://www.youtube.com/watch?v=1WoBs5jFY1M)

# [**How to make your own color palettes in ggplot BlogPost**](https://rfortherestofus.com/2023/01/how-to-make-your-own-color-palettes-in-ggplot/)

```{r}
library(tidyverse)
```

```{r}
# Define Colors -----------------------------------------------------------

pol_purple <- "#8359AB"
pol_yellow <- "#FFDE39"
pol_gray <- "#827C78"
pol_blue <- "#49B8F1"
pol_brown <- "#B88262"
pol_pink <- "#DC458E"
```

## **Qualitative Color Scale**

To make a qualitative color scale, I used the colors I defined in combination with the **`scale_color_manual()`** function.

```{r}
# Qualitative -------------------------------------------------------------

scale_color_pol_qualitative <- function() {
  
  scale_color_manual(values = c(pol_blue, 
                                pol_pink, 
                                pol_yellow, 
                                pol_purple, 
                                pol_gray, 
                                pol_brown))
  
}
```

## **Sequential Color Scale**

Next, I made a sequential color scale. I adapted the **`scale_fill_gradient()`** function to make this function.

```{r}
scale_fill_pol_sequential <- function(low_color = pol_yellow, 
                                     high_color = pol_purple) {
  
  scale_fill_gradient(low = low_color, 
                      high = high_color)
  
}
```

## **Diverging Color Scale**

Finally, I made a diverging color scale. To do this, I adapted the scale_fill_gradient2() function, which gives me the ability to set a medium color, in addition to the high and low colors.

```{r}
scale_fill_pol_diverging <- function(low_color = pol_yellow, 
                                    medium_color = "white",
                                    high_color = pol_pink) {
  
  scale_fill_gradient2(low = low_color, 
                       mid = medium_color,
                       high = high_color)
  
}
```

```{r}

palmerpenguins::penguins %>%
  ggplot() +
  geom_point(aes(x = bill_length_mm, 
                 y = flipper_length_mm,
                 color = island)) +
  labs(title = "Palmer Penguins", 
       subtitle = "Look at them go!",
       x = "Bill length",
       y = "Flipper length") +
  theme_minimal() +
  scale_color_pol_qualitative()
```

```{r}
# Download Data -----------------------------------------------------------

library(tigris)
options(tigris_use_cache = TRUE)

# Downloaded from https://github.com/tonmcg/US_County_Level_Election_Results_08-20
presidential_returns_by_county <- read_csv("https://github.com/tonmcg/US_County_Level_Election_Results_08-20/raw/master/2020_US_County_Level_Presidential_Results.csv")

# Done with tigris package
us_counties <- counties()

# Merge datasets
nc_presidential_returns_by_county <- us_counties %>% 
  left_join(presidential_returns_by_county,
            by = c("GEOID" = "county_fips")) %>% 
  filter(state_name == "North Carolina") %>% 
  mutate(county_name = str_remove(county_name, " County")) %>% 
  select(county_name, contains("votes"), per_point_diff) 

nc_presidential_returns_by_county %>% 
  ggplot(aes(fill = total_votes)) +
  geom_sf() +
  theme_void() +
  scale_fill_pol_sequential()

nc_presidential_returns_by_county %>% 
  ggplot(aes(fill = total_votes)) +
  geom_sf() +
  theme_void() +
  scale_fill_pol_sequential(low_color = pol_purple,
                           high_color = pol_yellow)
```

```{r}
# Diverging ---------------------------------------------------------------
nc_presidential_returns_by_county %>% 
  ggplot(aes(fill = per_point_diff)) +
  geom_sf() +
  theme_void() +
  scale_fill_pol_diverging()
```

## **A Couple Caveats**

This post has shown how to make custom color scales. What I haven't done is talked about choosing good colors for you color scales. If you want to read more on that, check out:

-   [**This blog post written by R for the Rest of Us consultant Cara Thompson**](https://rfortherestofus.com/2022/02/data-viz-org-branding/)

-   [**The Glamour of Graphics course**](https://rfortherestofus.com/courses/glamour/), which has an entire section on color

-   [**This incredibly comprehensive article by Lisa Charlotte Muth on choosing colors for data viz**](https://blog.datawrapper.de/beautifulcolors/)

The other important thing to note is that it's important to consider colorblindness when creating color palettes. Again, to keep things focused, I haven't done that in this blog post. However, there is a great [**R package called**](https://github.com/clauswilke/colorblindr)**`colorblindr`** to help you ensure your custom ggplot color palettes are accessible to all users.

Good luck making your own custom ggplot color palettes!
