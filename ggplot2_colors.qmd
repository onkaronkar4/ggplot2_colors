---
title: "ggplot2_colors"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
library(ggplot2)
library(tidyverse)
```

```{r}
# Get the output of the colors() function
my_colors <- colors()

my_colors <- noquote(paste0("c(", paste0("\"", colors(), "\"", collapse = ", "), ")")) # this code gives us color name in function c( "a", "b", "c") such that i can paste it in the cell below to see all the available colors in baseR & how they visually appear. 
cat(my_colors)
```

```{r}
colors <- c("white", "aliceblue", "antiquewhite", "antiquewhite1", "antiquewhite2", "antiquewhite3", "antiquewhite4", "aquamarine", "aquamarine1", "aquamarine2", "aquamarine3", "aquamarine4", "azure", "azure1", "azure2", "azure3", "azure4", "beige", "bisque", "bisque1", "bisque2", "bisque3", "bisque4", "black", "blanchedalmond", "blue", "blue1", "blue2", "blue3", "blue4", "blueviolet", "brown", "brown1", "brown2", "brown3", "brown4", "burlywood", "burlywood1", "burlywood2", "burlywood3", "burlywood4", "cadetblue", "cadetblue1", "cadetblue2", "cadetblue3", "cadetblue4", "chartreuse", "chartreuse1", "chartreuse2", "chartreuse3", "chartreuse4", "chocolate", "chocolate1", "chocolate2", "chocolate3", "chocolate4", "coral", "coral1", "coral2", "coral3", "coral4", "cornflowerblue", "cornsilk", "cornsilk1", "cornsilk2", "cornsilk3", "cornsilk4", "cyan", "cyan1", "cyan2", "cyan3", "cyan4", "darkblue", "darkcyan", "darkgoldenrod", "darkgoldenrod1", "darkgoldenrod2", "darkgoldenrod3", "darkgoldenrod4", "darkgray", "darkgreen", "darkgrey", "darkkhaki", "darkmagenta", "darkolivegreen", "darkolivegreen1", "darkolivegreen2", "darkolivegreen3", "darkolivegreen4", "darkorange", "darkorange1", "darkorange2", "darkorange3", "darkorange4", "darkorchid", "darkorchid1", "darkorchid2", "darkorchid3", "darkorchid4", "darkred", "darksalmon", "darkseagreen", "darkseagreen1", "darkseagreen2", "darkseagreen3", "darkseagreen4", "darkslateblue", "darkslategray", "darkslategray1", "darkslategray2", "darkslategray3", "darkslategray4", "darkslategrey", "darkturquoise", "darkviolet", "deeppink", "deeppink1", "deeppink2", "deeppink3", "deeppink4", "deepskyblue", "deepskyblue1", "deepskyblue2", "deepskyblue3", "deepskyblue4", "dimgray", "dimgrey", "dodgerblue", "dodgerblue1", "dodgerblue2", "dodgerblue3", "dodgerblue4", "firebrick", "firebrick1", "firebrick2", "firebrick3", "firebrick4", "floralwhite", "forestgreen", "gainsboro", "ghostwhite", "gold", "gold1", "gold2", "gold3", "gold4", "goldenrod", "goldenrod1", "goldenrod2", "goldenrod3", "goldenrod4", "gray", "gray0", "gray1", "gray2", "gray3", "gray4", "gray5", "gray6", "gray7", "gray8", "gray9", "gray10", "gray11", "gray12", "gray13", "gray14", "gray15", "gray16", "gray17", "gray18", "gray19", "gray20", "gray21", "gray22", "gray23", "gray24", "gray25", "gray26", "gray27", "gray28", "gray29", "gray30", "gray31", "gray32", "gray33", "gray34", "gray35", "gray36", "gray37", "gray38", "gray39", "gray40", "gray41", "gray42", "gray43", "gray44", "gray45", "gray46", "gray47", "gray48", "gray49", "gray50", "gray51", "gray52", "gray53", "gray54", "gray55", "gray56", "gray57", "gray58", "gray59", "gray60", "gray61", "gray62", "gray63", "gray64", "gray65", "gray66", "gray67", "gray68", "gray69", "gray70", "gray71", "gray72", "gray73", "gray74", "gray75", "gray76", "gray77", "gray78", "gray79", "gray80", "gray81", "gray82", "gray83", "gray84", "gray85", "gray86", "gray87", "gray88", "gray89", "gray90", "gray91", "gray92", "gray93", "gray94", "gray95", "gray96", "gray97", "gray98", "gray99", "gray100", "green", "green1", "green2", "green3", "green4", "greenyellow", "grey", "grey0", "grey1", "grey2", "grey3", "grey4", "grey5", "grey6", "grey7", "grey8", "grey9", "grey10", "grey11", "grey12", "grey13", "grey14", "grey15", "grey16", "grey17", "grey18", "grey19", "grey20", "grey21", "grey22", "grey23", "grey24", "grey25", "grey26", "grey27", "grey28", "grey29", "grey30", "grey31", "grey32", "grey33", "grey34", "grey35", "grey36", "grey37", "grey38", "grey39", "grey40", "grey41", "grey42", "grey43", "grey44", "grey45", "grey46", "grey47", "grey48", "grey49", "grey50", "grey51", "grey52", "grey53", "grey54", "grey55", "grey56", "grey57", "grey58", "grey59", "grey60", "grey61", "grey62", "grey63", "grey64", "grey65", "grey66", "grey67", "grey68", "grey69", "grey70", "grey71", "grey72", "grey73", "grey74", "grey75", "grey76", "grey77", "grey78", "grey79", "grey80", "grey81", "grey82", "grey83", "grey84", "grey85", "grey86", "grey87", "grey88", "grey89", "grey90", "grey91", "grey92", "grey93", "grey94", "grey95", "grey96", "grey97", "grey98", "grey99", "grey100", "honeydew", "honeydew1", "honeydew2", "honeydew3", "honeydew4", "hotpink", "hotpink1", "hotpink2", "hotpink3", "hotpink4", "indianred", "indianred1", "indianred2", "indianred3", "indianred4", "ivory", "ivory1", "ivory2", "ivory3", "ivory4", "khaki", "khaki1", "khaki2", "khaki3", "khaki4", "lavender", "lavenderblush", "lavenderblush1", "lavenderblush2", "lavenderblush3", "lavenderblush4", "lawngreen", "lemonchiffon", "lemonchiffon1", "lemonchiffon2", "lemonchiffon3", "lemonchiffon4", "lightblue", "lightblue1", "lightblue2", "lightblue3", "lightblue4", "lightcoral", "lightcyan", "lightcyan1", "lightcyan2", "lightcyan3", "lightcyan4", "lightgoldenrod", "lightgoldenrod1", "lightgoldenrod2", "lightgoldenrod3", "lightgoldenrod4", "lightgoldenrodyellow", "lightgray", "lightgreen", "lightgrey", "lightpink", "lightpink1", "lightpink2", "lightpink3", "lightpink4", "lightsalmon", "lightsalmon1", "lightsalmon2", "lightsalmon3", "lightsalmon4", "lightseagreen", "lightskyblue", "lightskyblue1", "lightskyblue2", "lightskyblue3", "lightskyblue4", "lightslateblue", "lightslategray", "lightslategrey", "lightsteelblue", "lightsteelblue1", "lightsteelblue2", "lightsteelblue3", "lightsteelblue4", "lightyellow", "lightyellow1", "lightyellow2", "lightyellow3", "lightyellow4", "limegreen", "linen", "magenta", "magenta1", "magenta2", "magenta3", "magenta4", "maroon", "maroon1", "maroon2", "maroon3", "maroon4", "mediumaquamarine", "mediumblue", "mediumorchid", "mediumorchid1", "mediumorchid2", "mediumorchid3", "mediumorchid4", "mediumpurple", "mediumpurple1", "mediumpurple2", "mediumpurple3", "mediumpurple4", "mediumseagreen", "mediumslateblue", "mediumspringgreen", "mediumturquoise", "mediumvioletred", "midnightblue", "mintcream", "mistyrose", "mistyrose1", "mistyrose2", "mistyrose3", "mistyrose4", "moccasin", "navajowhite", "navajowhite1", "navajowhite2", "navajowhite3", "navajowhite4", "navy", "navyblue", "oldlace", "olivedrab", "olivedrab1", "olivedrab2", "olivedrab3", "olivedrab4", "orange", "orange1", "orange2", "orange3", "orange4", "orangered", "orangered1", "orangered2", "orangered3", "orangered4", "orchid", "orchid1", "orchid2", "orchid3", "orchid4", "palegoldenrod", "palegreen", "palegreen1", "palegreen2", "palegreen3", "palegreen4", "paleturquoise", "paleturquoise1", "paleturquoise2", "paleturquoise3", "paleturquoise4", "palevioletred", "palevioletred1", "palevioletred2", "palevioletred3", "palevioletred4", "papayawhip", "peachpuff", "peachpuff1", "peachpuff2", "peachpuff3", "peachpuff4", "peru", "pink", "pink1", "pink2", "pink3", "pink4", "plum", "plum1", "plum2", "plum3", "plum4", "powderblue", "purple", "purple1", "purple2", "purple3", "purple4", "red", "red1", "red2", "red3", "red4", "rosybrown", "rosybrown1", "rosybrown2", "rosybrown3", "rosybrown4", "royalblue", "royalblue1", "royalblue2", "royalblue3", "royalblue4", "saddlebrown", "salmon", "salmon1", "salmon2", "salmon3", "salmon4", "sandybrown", "seagreen", "seagreen1", "seagreen2", "seagreen3", "seagreen4", "seashell", "seashell1", "seashell2", "seashell3", "seashell4", "sienna", "sienna1", "sienna2", "sienna3", "sienna4", "skyblue", "skyblue1", "skyblue2", "skyblue3", "skyblue4", "slateblue", "slateblue1", "slateblue2", "slateblue3", "slateblue4", "slategray", "slategray1", "slategray2", "slategray3", "slategray4", "slategrey", "snow", "snow1", "snow2", "snow3", "snow4", "springgreen", "springgreen1", "springgreen2", "springgreen3", "springgreen4", "steelblue", "steelblue1", "steelblue2", "steelblue3", "steelblue4", "tan", "tan1", "tan2", "tan3", "tan4", "thistle", "thistle1", "thistle2", "thistle3", "thistle4", "tomato", "tomato1", "tomato2", "tomato3", "tomato4", "turquoise", "turquoise1", "turquoise2", "turquoise3", "turquoise4", "violet", "violetred", "violetred1", "violetred2", "violetred3", "violetred4", "wheat", "wheat1", "wheat2", "wheat3", "wheat4", "whitesmoke", "yellow", "yellow1", "yellow2", "yellow3", "yellow4", "yellowgreen")


```

## want to pick your own colors

1.  https://mycolor.space/?hex=%238350D7&sub=1 \# this also gives us a color palette based on our chosen color.

2.  https://htmlcolorcodes.com/

## Changing other parameters with hex codes like background

You can also change the color of the plot background, the grid lines, and the text.

Use hex codes or R default colors interchangably within the theme() command. Theme command often has a parameter (i.e. panel.background) = element_rect/element_text/element_line.

-   element_rect/text/line has arguments fill and color for larger areas vs. lines like with ggplot.

```{r}
# Background: theme(panel.background = element_rect(fill = "XXXX"))
library(palmerpenguins)

(penguin_flipper <- ggplot(penguins) + 
  aes(x = flipper_length_mm, y = body_mass_g) + 
  geom_point(show.legend = F) + 
    labs( x = "Flipper Length", 
          y = "Body mass", 
          title = "Palmer penguins flipper length and body mass") +
    theme_minimal()
)


penguin_flipper + 
  theme(panel.background = element_rect(fill = "darkred"))


penguin_flipper + 
  scale_color_gradient(low = "#D16BA5", high = "#5FFBF1") + 
  theme(panel.background = element_rect(fill = "#E6E1E7"))

# Plot outline: theme(panel.background = element_rect(color = 'XXXX'))
penguin_flipper +
  scale_color_gradient(low = "#D16BA5", high = "#5FFBF1") + 
  theme(panel.background = element_rect(fill = "#E6E1E7", color = "red"))

# Gridlines: theme(panel.grid = element_line(color = "XXXX"))

penguin_flipper + 
  scale_color_gradient(low = "#D16BA5", high = "#5FFBF1") + 
  theme(panel.background = element_rect(fill = "#E6E1E7", color = "darkgrey"),
    panel.grid = element_line(linetype = 2, color = "red"))

# Text: theme(title = element_text(color = "XXXX"))
penguin_flipper + 
  scale_color_gradient(low = "#D16BA5", high = "#5FFBF1") + 
  theme(panel.background = element_rect(fill = "#E6E1E7", color = "darkgrey"),
    panel.grid = element_line(color = "grey"), 
    title = element_text(color = "red", face = "bold.italic"))
# Axis markers: theme(axis.text = element_text(color = "XXX")) 
penguin_flipper + 
  scale_color_gradient(low = "#D16BA5", high = "#5FFBF1") + 
  theme(panel.background = element_rect(fill = "#E6E1E7", color = "darkgrey"),
    panel.grid = element_line(color = "grey"), 
    axis.text  = element_text(color = "red", face = "bold.italic"))

# Image background/outline: theme(plot.background = element_rect(fill = "XXX", color = "XXXX"), )

penguin_flipper + 
  scale_color_gradient(low = "#D16BA5", high = "#5FFBF1") + 
  theme(panel.background = element_rect(fill = "#E6E1E7", color = "darkgrey"),
    panel.grid = element_line(color = "grey"), 
    plot.background = element_rect(fill = "lightgrey", 
                                   color = "black"))
```

# RColorBrewer

```{r}
library(RColorBrewer) # also color blind friendly

# to see palettes and names use 

display.brewer.all()
```

## Colors in ggplot2

scale_color_manual for categorical data scale_color_gradient scale_color_graident2

### coolor.co

to choose your color hexcode/color palette

<https://coolors.co/palettes/trending>

### paletteer

While deciding to use a color palette, not only do we wish to know the hex color codes but also how the color looks <https://emilhvitfeldt.github.io/paletteer/reference/paletteer_d.html>

```{r}
library(paletteer)
palettes_d_names(paletteer)


palettes_d_names

palettes_c_names

paletteer_d("wesanderson::Darjeeling1")


paletteer_d("Redmonder::dPBIPuOr", 14, type = "continuous")

paletteer_c("viridis::inferno", n = 5)

paletteer_d("viridis::inferno", 5)


paletteer_d("wesanderson::Darjeeling1")

paletteer_d("beyonce::X3")

paletteer_d("nord::frost")

paletteer_d("Redmonder::dPBIPuOr", 14, type = "continuous")

paletteer_c("viridis::inferno", n = 5)

paletteer_d("viridis::inferno", 5)



paletteer_d("wesanderson::Darjeeling1")

paletteer_d("beyonce::X3")

paletteer_d("nord::frost")

paletteer_d("Redmonder::dPBIPuOr", 14, type = "continuous")

paletteer_c("viridis::inferno", n = 5)

paletteer_d("viridis::inferno", n = 3)
```

### MetBrewer 30 palettes inspired by works at the

@metmuseum and expanding!

https://github.com/BlakeRMills/MetBrewer/tree/main#functions

```{r}
# devtools::install_github("BlakeRMills/MetBrewer") 
library(MetBrewer)

```

List of pallettes name availabe to use

```{r}
MetBrewer::MetPalettes
```

```{r}
met.brewer(name="VanGogh1",n=7,type="discrete")
```

```{r}
met.brewer("Manet", 5)
```

```{r}
met.brewer("Morgenstern")
```

```{r}
met.brewer("Troy",n=15,type="continuous")
```

```{r}
met.brewer("Hokusai",n=100)
```

### cols4all - New R package for colors

https://twitter.com/MartijnTennekes/status/1496540597993320455

https://github.com/mtennekes/cols4all

**References:**

1.  [R-Ladies Freiburg (English) - Color your ggplot beautiful!](https://www.youtube.com/watch?v=A4fP31h4roU&t=1684s)

## {ggplot2} + {dplyr} combo for using colors

-   Create a new column with color names using case_when()

-   Use new column in aes() and add a scale_color_identity() layer.

    Great trick to draw your reader's attention to specific parts of your plot.

```{r}
library(dplyr)
library(ggplot2)
penguins_data <- palmerpenguins::penguins |> 
  filter(!is.na(sex)) |> 
  mutate(
    my_color = case_when(
      sex == 'male' & body_mass_g < 3800 ~ 'dodgerblue4', 
      sex == 'female' & body_mass_g >4000 ~ 'firebrick4', 
      TRUE ~ 'grey80'
    )
  )

penguins_data |> 
  ggplot(aes(x = body_mass_g, y = flipper_length_mm, color = my_color)) + 
  geom_point(size = 4, alpha = 0.75) +
  scale_color_identity() + 
  theme_minimal()
```

```{r}
penguins_data <- palmerpenguins::penguins |> 
  filter(!is.na(sex)) |> 
  mutate(
    my_color = case_when(
      sex == 'male' & body_mass_g < 3800 ~ 'dodgerblue4', 
      sex == 'female' & body_mass_g >4000 ~ 'firebrick4', 
      TRUE ~ 'grey80'
    ), 
    my_alpha = if_else(my_color == 'grey80', 0.50, 0.75)
  )

# same idea works with alpha too

penguins_data |> 
  ggplot(aes(
    x = body_mass_g, 
    y = flipper_length_mm, 
    color = my_color,
    alpha = my_alpha
  )) + 
  geom_point(size = 3) + 
  scale_color_identity() + 
  scale_alpha_identity()
```

## [Use colors to drill down into important parts of your data viz.](https://twitter.com/rappa753/status/1646528705123201029)

![1️⃣](https://abs-0.twimg.com/emoji/v2/svg/31-20e3.svg){alt="1️⃣"} - case_when() or if_else() ![2️⃣](https://abs-0.twimg.com/emoji/v2/svg/32-20e3.svg){alt="2️⃣"} - scale\_\*\_identity()

Use this combo to change whatever you want based on any condition you like.

```{r}
library(tibble)

#create fake data
fake_data <- tibble(
  angle = runif(500, 0, 360),
  radius = runif(500, 0, 20),
  x = rnorm(500, 0, 10),
  y = rnorm(500, 0, 5)
)

# Change color and shape dependent on angle and distance from 0 
# Change transparency dependent on angle

fake_data_conditionally_formatted <- fake_data |> 
  mutate(
    custom_col = case_when(
      !between(angle, pi/8, 3*pi/4) ~ 'grey60', 
      radius <1 ~ "#22EE50", 
      between(radius, 1, 2.5) ~ "#AA4465", 
      T ~ "#5296A5"
      
    ), 
    custom_shape = case_when(
      !between(angle, pi/8, 3*pi/4) ~ 16, 
      radius <1 ~ 15, 
      between(radius, 1, 2.5) ~ 17, 
      T ~ 19
    ), 
    custom_alpha = if_else(between(angle, pi/8, 3*pi/4
                                   ), 0.5, 0.25
      
    )
  )


# Map to custom columns in dataset, 

fake_data_conditionally_formatted |> 
  ggplot(aes(x, y, alpha = custom_alpha, col = custom_col, shape = custom_shape)) +   geom_point(size = 1) + 
  coord_fixed() + 
  theme_minimal(base_size = 14) + 
  theme(
    panel.grid.major = element_blank(), 
    panel.background = element_rect(fill = "white", color = "grey40"), 
    text = element_text( color = "grey40") + 
      labs(
        x = element_blank(), 
        y = element_blank()) + 
      scale_color_identity() + 
      scale_shape_identity() + 
      scale_alpha_identify()
        

  
```

## coloring the words in your title (Instead of using a big legend in your plot)

3 steps to do that with [#rstats](https://twitter.com/hashtag/rstats?src=hashtag_click):

-   Use Markdown in your title with {ggtext} and theme()

-   Create a text variable that wraps words into \<span color="..."\>\</span\>

-   Use that variable in labs()

```{r}
library(ggtext)
penguins_data <- palmerpenguins::penguins |> 
  filter(!is.na(sex)) |> 
  mutate(
    my_color = case_when(
      sex == 'male' & body_mass_g < 3800 ~ 'dodgerblue4', 
      sex == 'female' & body_mass_g >4000 ~ 'firebrick4', 
      TRUE ~ 'grey80'
    ), 
    my_alpha = if_else(my_color == 'grey80', 0.25, 0.75)
  )

# create variables that wraps colored words into <span> tags, and makes line breaks with <br> for better readability. create text by combinding multiple text pieces

title_text <- paste0(
  'This plot shows', 
  '<span style = "color:dodgerblue4"> light male penguins </span>, ', 
   '<span style = "color:firebrick4"> heavy female penguins </span> ',
  '<br>', 
  'and<span  style = "color:grey80"> all other penguins </span>'
)

penguins_data |> 
  ggplot(aes(
    x = body_mass_g, 
    y = flipper_length_mm, 
    color = my_color,
    alpha = my_alpha
  )) + 
  geom_point(size = 3) + 
  scale_color_identity() + 
  scale_alpha_identity() +
  theme_minimal(base_size = 14) +
  theme(plot.title = element_markdown())+
labs(title = title_text)




```

```{r}
palmerpenguins::penguins |> 
  ggplot(aes(y = flipper_length_mm, x = bill_length_mm, color = sex)) +
  geom_point(size = 4) +
  theme(
    polot.title = ggtext::element_markdown()
  ) + 
  labs(title = 'Measurement of <span style = "color:#E69F00"> **male** </span>
       and <span style = "color:#009E73"> **female** </span> penguins')
```

![1️⃣](https://abs-0.twimg.com/emoji/v2/svg/31-20e3.svg)

# [**How to make your own color palettes in ggplot**](https://www.youtube.com/watch?v=1WoBs5jFY1M)

# [**How to make your own color palettes in ggplot BlogPost**](https://rfortherestofus.com/2023/01/how-to-make-your-own-color-palettes-in-ggplot/)

```{r}
library(tidyverse)
```

```{r}
# Define Colors -----------------------------------------------------------

pol_purple <- "#8359AB"
pol_yellow <- "#FFDE39"
pol_gray <- "#827C78"
pol_blue <- "#49B8F1"
pol_brown <- "#B88262"
pol_pink <- "#DC458E"
```

## **Qualitative Color Scale**

To make a qualitative color scale, I used the colors I defined in combination with the **`scale_color_manual()`** function.

```{r}
# Qualitative -------------------------------------------------------------

scale_color_pol_qualitative <- function() {
  
  scale_color_manual(values = c(pol_blue, 
                                pol_pink, 
                                pol_yellow, 
                                pol_purple, 
                                pol_gray, 
                                pol_brown))
  
}
```

## **Sequential Color Scale**

Next, I made a sequential color scale. I adapted the **`scale_fill_gradient()`** function to make this function.

```{r}
scale_fill_pol_sequential <- function(low_color = pol_yellow, 
                                     high_color = pol_purple) {
  
  scale_fill_gradient(low = low_color, 
                      high = high_color)
  
}
```

## **Diverging Color Scale**

Finally, I made a diverging color scale. To do this, I adapted the scale_fill_gradient2() function, which gives me the ability to set a medium color, in addition to the high and low colors.

```{r}
scale_fill_pol_diverging <- function(low_color = pol_yellow, 
                                    medium_color = "white",
                                    high_color = pol_pink) {
  
  scale_fill_gradient2(low = low_color, 
                       mid = medium_color,
                       high = high_color)
  
}
```

```{r}

palmerpenguins::penguins %>%
  ggplot() +
  geom_point(aes(x = bill_length_mm, 
                 y = flipper_length_mm,
                 color = island)) +
  labs(title = "Palmer Penguins", 
       subtitle = "Look at them go!",
       x = "Bill length",
       y = "Flipper length") +
  theme_minimal() +
  scale_color_pol_qualitative()
```

```{r}
# Download Data -----------------------------------------------------------

library(tigris)
options(tigris_use_cache = TRUE)

# Downloaded from https://github.com/tonmcg/US_County_Level_Election_Results_08-20
presidential_returns_by_county <- read_csv("https://github.com/tonmcg/US_County_Level_Election_Results_08-20/raw/master/2020_US_County_Level_Presidential_Results.csv")

# Done with tigris package
us_counties <- counties()

# Merge datasets
nc_presidential_returns_by_county <- us_counties %>% 
  left_join(presidential_returns_by_county,
            by = c("GEOID" = "county_fips")) %>% 
  filter(state_name == "North Carolina") %>% 
  mutate(county_name = str_remove(county_name, " County")) %>% 
  select(county_name, contains("votes"), per_point_diff) 

nc_presidential_returns_by_county %>% 
  ggplot(aes(fill = total_votes)) +
  geom_sf() +
  theme_void() +
  scale_fill_pol_sequential()

nc_presidential_returns_by_county %>% 
  ggplot(aes(fill = total_votes)) +
  geom_sf() +
  theme_void() +
  scale_fill_pol_sequential(low_color = pol_purple,
                           high_color = pol_yellow)
```

```{r}
# Diverging ---------------------------------------------------------------
nc_presidential_returns_by_county %>% 
  ggplot(aes(fill = per_point_diff)) +
  geom_sf() +
  theme_void() +
  scale_fill_pol_diverging()
```

## **A Couple Caveats**

This post has shown how to make custom color scales. What I haven't done is talked about choosing good colors for you color scales. If you want to read more on that, check out:

-   [**This blog post written by R for the Rest of Us consultant Cara Thompson**](https://rfortherestofus.com/2022/02/data-viz-org-branding/)

-   [**The Glamour of Graphics course**](https://rfortherestofus.com/courses/glamour/), which has an entire section on color

-   [**This incredibly comprehensive article by Lisa Charlotte Muth on choosing colors for data viz**](https://blog.datawrapper.de/beautifulcolors/)

The other important thing to note is that it's important to consider colorblindness when creating color palettes. Again, to keep things focused, I haven't done that in this blog post. However, there is a great [**R package called**](https://github.com/clauswilke/colorblindr)**`colorblindr`** to help you ensure your custom ggplot color palettes are accessible to all users.

Good luck making your own custom ggplot color palettes!

# [**Three easy ways to use better colors in ggplot by Albert Rapp**](https://www.youtube.com/watch?v=ZVSbY4z7tMY&t=56s)

1.  scale_color\_\*()
2.  scale_color_manual()
3.  scale_color_identity \# this is powerful

```{r}
my_penguins_plot <-palmerpenguins::penguins |> 
  filter(!is.na(sex)) |> 
  ggplot(
    aes(x = bill_length_mm, y = body_mass_g, color = species)) + 
      geom_point(size = 5, alpha = 0.85) +
    theme_minimal(
      base_size = 16, base_family = "Source Sans Pro"
    ) + 
    labs(
      x = "Bill length (in mm)", 
      y = "Penguin weights (in g)", 
      title = 'Penguins from the Palmer Archipelago', 
      color = 'Species'
    )
    
  
```

## Number 1 color trick scale_color\_\*()

```{r}
my_penguins_plot + 
  scale_color_brewer()
# look at the Palettes section of the scale_color_brewer documentation just search in the help tab of RStudio
my_penguins_plot +
  scale_color_brewer(palette = "Set2")
# we can also use viridus color palette

my_penguins_plot +
  scale_color_viridis_d(option = "cividis") # now the yellow color is not looking that great, so here goes the bonus trick 
```

## Bonus

```{r}
# to do something about yellow color, lets change everywhere we have color to fill aesthetic
palmerpenguins::penguins |> 
  filter(!is.na(sex)) |> 
  ggplot(
    aes(x = bill_length_mm, y = body_mass_g, fill = species)) + 
      geom_point( shape = 21, size = 5, alpha = 0.85, color = 'grey') + # geom_pont doesnt have a fill aesthetic we changed the shape to 21 to bring the colored points, because shape here act as the fill point instead of a regular point
    theme_minimal(
      base_size = 16, base_family = "Britannic Bold"
    ) + 
    labs(
      x = "Bill length (in mm)", 
      y = "Penguin weights (in g)", 
      title = 'Penguins from the Palmer Archipelago', 
      fill = 'Species'
    ) + 
  scale_fill_viridis_d(option = 'cividis')
```

## Number 2 scale_color_manual()

[**Okabe Ito Colors**](https://mikemol.github.io/technique/colorblind/2018/02/11/color-safe-palette.html)

[**coolors.co**](https://coolors.co/7ae7c7-ffcad4-4c5b5c-f93943-dd6031)

```{r}
my_favorite_colors <- c("#E69F00", "#009E73", "#007282")
# always set the names of your color vectors so that you can refer to them later on
names(my_favorite_colors) = c("Adelie",   "Chinstrap", "Gentoo")

my_penguins_plot +
scale_color_manual(values = my_favorite_colors)
```

## Number 3: scale_color_identity

```{r}
palmerpenguins::penguins |> 
  filter(!is.na(sex)) |> 
  mutate( my_color = case_when(
    bill_length_mm < 40 ~ "#007282", 
    between(bill_length_mm, 40, 50) ~ "#009E73", 
    bill_length_mm > 50 ~ "#E69F00", 
    
  )) |> 
  ggplot(
    aes(x = bill_length_mm, y = body_mass_g, color = my_color)) + 
      geom_point(size = 5, alpha = 0.85) +
    theme_minimal(
      base_size = 16, base_family = "Source Sans Pro"
    ) + 
    labs(
      x = "Bill length (in mm)", 
      y = "Penguin weights (in g)", 
      title = 'Penguins from the Palmer Archipelago', 
      color = 'Species'
    ) +
  scale_color_identity()
```
